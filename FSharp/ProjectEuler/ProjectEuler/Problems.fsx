#load "Aggregate.fs"
open ProjectEuler

// Define your library scripting code here
module Problem1 = 
//    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//    Find the sum of all the multiples of 3 or 5 below 1000.
    
    //Answer 233168
    let aggregate = new ProjectEuler.Aggregate()
    let multiples = aggregate.multiplesOf(3, 5, [0 .. 999])

module Problem2 =
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    let sum start = Seq.fold ( fun acc elem  -> acc + elem) 0 start
    let fibonacciGenerator = Seq.unfold (fun (a, b) -> if (a < 4000000) then Some(a, (b, a + b)) else None)
    
    (1, 2) 
    |> fibonacciGenerator
    |> Seq.filter (fun x -> x % 2 = 0)
    |> sum
    |> printfn "The sum of the elements is %d."
